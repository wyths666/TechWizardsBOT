import asyncio
from datetime import datetime
from decimal import Decimal
from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, ForceReply
from bot.templates.admin import menu as tadmin
from bot.templates.admin.menu import AdminState
from db.beanie.models import Claim, KonsolPayment, User
from core.bot import bot
from utils.konsol_client import konsol_client

router = Router()

# --- 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "–ó–∞–ø–æ–ª–Ω–∏—Ç—å ID –±–∞–Ω–∫–∞" ---
@router.callback_query(F.data.startswith("fill_bank_id_"))
async def request_bank_id(call: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∞ ID –±–∞–Ω–∫–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ –°–ë–ü"""
    claim_id = call.data.replace("fill_bank_id_", "")
    await state.update_data(pending_claim_id=claim_id)
    await state.set_state(AdminState.waiting_for_bank_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await call.message.reply(
        text="<b>–í–≤–µ–¥–∏—Ç–µ ID –±–∞–Ω–∫–∞:</b>",
        parse_mode="HTML",
        reply_markup=ForceReply(selective=True, input_field_placeholder="–í–≤–µ–¥–∏—Ç–µ ID –±–∞–Ω–∫–∞...")
    )
    await call.answer()

# --- 2. –ü—Ä–∏–µ–º ID –±–∞–Ω–∫–∞  ---
@router.message(StateFilter(AdminState.waiting_for_bank_id))
async def receive_bank_id(msg: Message, state: FSMContext):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç ID –±–∞–Ω–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –∑–∞—è–≤–∫–µ"""
    data = await state.get_data()
    claim_id = data.get("pending_claim_id")

    if not claim_id:
        await msg.reply("‚ùå –û—à–∏–±–∫–∞: ID –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    bank_member_id = msg.text.strip()

    # –ù–∞–π–¥–µ–º –∑–∞—è–≤–∫—É
    claim = await Claim.get(claim_id=claim_id)
    if not claim:
        await msg.reply("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —ç—Ç–æ –∑–∞—è–≤–∫–∞ –°–ë–ü
    if not claim.phone:
        await msg.reply("‚ùå –≠—Ç–∞ –∑–∞—è–≤–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∑–∞—è–≤–∫–æ–π –°–ë–ü.")
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω–∏–º ID –±–∞–Ω–∫–∞ –≤ –∑–∞—è–≤–∫–µ
    await claim.update(bank_member_id=bank_member_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    await msg.reply(
        text=f"‚úÖ ID –±–∞–Ω–∫–∞ <code>{bank_member_id}</code> —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –∑–∞—è–≤–∫–∏ <b>{claim_id}</b>.\n\n"
             f"<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>",
        parse_mode="HTML",
        reply_markup=tadmin.claim_action_ikb(claim_id) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å confirm/reject
    )

    await state.clear()

# --- 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã (—Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞) ---
@router.callback_query(F.data.startswith("confirm_"))
async def handle_confirm_action(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É'"""
    claim_id = call.data.replace("confirm_", "")
    print(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞—è–≤–∫–∏: {claim_id}")

    await process_claim_approval(call, claim_id)

# --- 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è ---
@router.callback_query(F.data.startswith("reject_"))
async def handle_reject_action(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å'"""
    claim_id = call.data.replace("reject_", "")
    print(f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏: {claim_id}")

    await process_claim_rejection(call, claim_id)

async def process_claim_approval(call: CallbackQuery, claim_id: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: —Å–æ–∑–¥–∞–Ω–∏–µ –ù–û–í–û–ì–û –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ—Ä–∞ –∏ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        claim = await Claim.get(claim_id=claim_id)
        if not claim:
            await call.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        print(f"üîç –ù–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞: {claim.claim_id}, —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {claim.claim_status}")

        # === –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
        user = await User.get(tg_id=claim.user_id)
        if not user:
            await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # === 1. –°–æ–∑–¥–∞—ë–º –ù–û–í–û–ì–û contract_id –≤ Konsol API ===
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è contract_id
        if claim.phone:
            # –ï—Å–ª–∏ –°–ë–ü - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ –∑–∞—è–≤–∫–∏
            contractor_phone = claim.phone
        else:
            # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            contractor_phone = "+79000000001"

        contractor_data = {
            "kind": "individual",
            "first_name": call.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            "last_name": call.from_user.last_name or "–¢–µ–ª–µ–≥—Ä–∞–º",
            "phone": contractor_phone
        }

        try:
            contractor_result = await konsol_client.create_contractor(contractor_data)
            contractor_id = contractor_result["id"]

            # === –°–æ—Ö—Ä–∞–Ω—è–µ–º contractor_id –≤ –ó–ê–Ø–í–ö–ï ===
            await claim.update(contractor_id=contractor_id)

            print(f"[CONTRACTOR] –ù–æ–≤—ã–π contract_id —Å–æ–∑–¥–∞–Ω –¥–ª—è –∑–∞—è–≤–∫–∏ {claim.claim_id}: {contractor_id}")

        except Exception as e:
            error_msg = f"[CONTRACTOR ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å contract_id –¥–ª—è –∑–∞—è–≤–∫–∏ {claim.claim_id}: {e}"
            print(error_msg)
            await call.message.answer(error_msg)
            await call.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è contract_id", show_alert=True)
            return # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ contract_id –Ω–µ —Å–æ–∑–¥–∞–Ω

        # === 2. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ ===
        bank_details_kind = "fps" if claim.phone else "card"

        if bank_details_kind == "fps":
            if not claim.bank_member_id:
                await call.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –±–∞–Ω–∫–∞ –¥–ª—è –°–ë–ü!", show_alert=True)
                return
            bank_details = {
                "fps_mobile_phone": claim.phone,
                "fps_bank_member_id": claim.bank_member_id
            }
        else:
            bank_details = {
                "card_number": claim.card
            }

        payment_data = {
            "contractor_id": contractor_id, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ù–û–í–´–ô contractor_id –∏–∑ –∑–∞—è–≤–∫–∏
            "services_list": [
                {
                    "title": f"–í—ã–ø–ª–∞—Ç–∞ –ø–æ –∑–∞—è–≤–∫–µ {claim.claim_id}",
                    "amount": str(claim.amount)
                }
            ],
            "bank_details_kind": bank_details_kind,
            "bank_details": bank_details,
            "purpose": "–í—ã–ø–ª–∞—Ç–∞ –≤—ã–∏–≥—Ä—ã—à–∞",
            "amount": str(claim.amount)
        }

        # === 3. –°–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç—ë–∂ –≤ Konsol API ===
        try:
            result = await konsol_client.create_payment(payment_data)
            payment_id = result.get("id")
            payment_status = result.get("status")

            print(f"[PAYMENT] –ü–ª–∞—Ç—ë–∂ —Å–æ–∑–¥–∞–Ω –¥–ª—è –∑–∞—è–≤–∫–∏ {claim.claim_id}: {payment_id}")

            # === 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç—ë–∂ –≤ –ë–î ===
            await KonsolPayment.create(
                konsol_id=payment_id,
                contractor_id=contractor_id, # –ù–û–í–´–ô contractor_id
                amount=claim.amount,
                status=payment_status,
                purpose=payment_data["purpose"],
                services_list=payment_data["services_list"],
                bank_details_kind=bank_details_kind,
                card_number=claim.card,
                phone_number=claim.phone,
                bank_member_id=claim.bank_member_id,
                claim_id=claim.claim_id,
                user_id=claim.user_id
            )

            # === 5. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤ –∑–∞—è–≤–∫–µ ===
            await claim.update(
                claim_status="confirm",
                process_status="complete",
                konsol_payment_id=payment_id,
                updated_at=datetime.utcnow()
            )

            # === 6. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ ===
            if call.message.photo:
                current_caption = call.message.caption or ""
                new_caption = f"{current_caption}\n\n‚úÖ –°—Ç–∞—Ç—É—Å: –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ (ID: {payment_id})"
                await call.message.edit_caption(caption=new_caption, reply_markup=None)
            else:
                current_text = call.message.text or ""
                new_text = f"{current_text}\n\n‚úÖ –°—Ç–∞—Ç—É—Å: –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ (ID: {payment_id})"
                await call.message.edit_text(text=new_text, reply_markup=None)

            # === 7. –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
            try:
                await bot.send_message(
                    chat_id=claim.user_id,
                    text="‚úÖ –í–∞—à –≤—ã–∏–≥—Ä—ã—à –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã. –ö–æ–º–ø–∞–Ω–∏—è Pure –∂–µ–ª–∞–µ—Ç –í–∞–º –∫—Ä–µ–ø–∫–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è, –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è."
                )
            except Exception as notify_e:
                print(f"[NOTIFY ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {claim.user_id}: {notify_e}")

            await call.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")

        except Exception as pay_e:
            error_msg = f"[PAYMENT ERROR] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ {claim.claim_id}: {pay_e}"
            print(error_msg)
            await call.message.answer(error_msg)
            await call.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ {claim_id}: {e}")
        import traceback
        traceback.print_exc()
        await call.answer("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", show_alert=True)

# --- 6. –õ–æ–≥–∏–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è ---
async def process_claim_rejection(call: CallbackQuery, claim_id: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    try:
        claim = await Claim.get(claim_id=claim_id)
        if not claim:
            await call.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        await claim.update(
            claim_status="cancelled",
            process_status="cancelled",
            updated_at=datetime.utcnow()
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
        if call.message.photo:
            current_caption = call.message.caption or ""
            new_caption = f"{current_caption}\n\n‚ùå –°—Ç–∞—Ç—É—Å: –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
            await call.message.edit_caption(caption=new_caption, reply_markup=None)
        else:
            current_text = call.message.text or ""
            new_text = f"{current_text}\n\n‚ùå –°—Ç–∞—Ç—É—Å: –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
            await call.message.edit_text(text=new_text, reply_markup=None)

        print(f"‚úèÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ (–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ)")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        # try:
        #     await bot.send_message(
        #         chat_id=claim.user_id,
        #         text="‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
        #     )
        # except Exception as e:
        #     print(f"[NOTIFY ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {claim.user_id}: {e}")
        #
        await call.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è", show_alert=True)
