from datetime import datetime

from aiogram import Router, types, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, ForceReply
from bot.templates.admin import menu as tadmin
from bot.templates.admin.menu import AdminState, quick_messages_ikb, admin_reply_ikb
from bot.templates.user.menu import user_reply_ikb
from db.beanie.models import Claim, AdminMessage
from core.bot import bot, bot_config

router = Router()

pending_actions = {}  # {user_id: {"type": "message", "claim_id": "000001", "data": {...}}}
pending_replies = {}  # –î–ª—è ForceReply

@router.callback_query(tadmin.ClaimCallback.filter())
async def handle_claim_action(call: CallbackQuery, callback_data: tadmin.ClaimCallback):
    claim_id = callback_data.claim_id
    action = callback_data.action

    # === –ù–∞—Ö–æ–¥–∏–º –∑–∞—è–≤–∫—É –≤ MongoDB ===
    claim = await Claim.get(claim_id=claim_id)
    if not claim:
        await call.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ.", show_alert=True)
        return

    # === –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã ===
    if action == "accept":
        claim_status = "confirm"
        process_status = "complete"
        status_text = "–ü—Ä–∏–Ω—è—Ç–∞"
        # –ò–º–∏—Ç–∞—Ü–∏—è –æ–ø–ª–∞—Ç—ã
        await fake_payment_api(claim_id)
    else:  # "reject"
        claim_status = "cancelled"
        process_status = "cancelled"
        status_text = "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞"

    # === –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ MongoDB ===
    await claim.update(
        claim_status=claim_status,
        process_status=process_status
    )

    # === –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ ===
    new_text = f"{call.message.text}\n\n–°—Ç–∞—Ç—É—Å: {status_text}"
    await call.message.edit_text(text=new_text)

    await call.answer()


async def fake_payment_api(claim_id: str):
    """–ó–∞–≥–ª—É—à–∫–∞ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API Konsol.pro"""
    print(f"[PAYMENT] –ò–º–∏—Ç–∞—Ü–∏—è –æ–ø–ª–∞—Ç—ã –ø–æ –∑–∞—è–≤–∫–µ {claim_id}")
    # TODO: –≤ –±—É–¥—É—â–µ–º ‚Äî –≤—ã–∑–æ–≤ integrations/konsol.py


@router.callback_query(F.data.startswith("message_"))
async def start_message_to_user(call: CallbackQuery):
    claim_id = call.data.replace("message_", "")

    claim = await Claim.get(claim_id=claim_id)
    if not claim:
        await call.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    pending_actions[call.from_user.id] = {
        "type": "message",
        "claim_id": claim_id,
        "user_id": claim.user_id
    }

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –±—ã—Å—Ç—Ä—ã–µ —à–∞–±–ª–æ–Ω—ã –∏–ª–∏ —Å–≤–æ–π —Ç–µ–∫—Å—Ç
    await call.message.answer(
        f"üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∑–∞—è–≤–∫–µ {claim_id}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–µ–∫—Å—Ç:",
        reply_markup=quick_messages_ikb(claim_id)
    )
    await call.answer()


async def send_message_to_user(user_id: int, claim_id: str, text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¢–ï–ö–°–¢–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é"""
    message_text = text or "–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    await AdminMessage.create(
        claim_id=claim_id,
        from_admin_id=user_id,  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ ID —Ç–æ–≥–æ, –∫—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é
        to_user_id=user_id,
        message_text=message_text,
        is_reply=False
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await bot.send_message(
            chat_id=user_id,
            text=f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ –∑–∞—è–≤–∫–µ {claim_id}:\n\n{message_text}",
            reply_markup=user_reply_ikb(claim_id)
        )
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return False


@router.callback_query(F.data.startswith("chat_"))
async def view_chat_history(call: CallbackQuery):
    claim_id = call.data.replace("chat_", "")

    claim = await Claim.get(claim_id=claim_id)
    if not claim:
        await call.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    messages = await AdminMessage.find(AdminMessage.claim_id == claim_id).sort("created_at").to_list()

    if not messages:
        await call.answer("–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç–∞", show_alert=True)
        return

    chat_history = f"üìã –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –ø–æ –∑–∞—è–≤–∫–µ {claim_id}\n"
    chat_history += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {claim.user_id}\n\n"

    for msg in messages:
        sender = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if msg.is_reply else "üõ°Ô∏è –ê–¥–º–∏–Ω"
        chat_history += f"{sender} ({msg.created_at.strftime('%H:%M %d.%m')}):\n{msg.message_text}\n\n"

    await call.message.answer(chat_history)
    await call.answer()


@router.callback_query(F.data.startswith("custom_"))
async def ask_custom_text(call: CallbackQuery):
    claim_id = call.data.replace("custom_", "")

    await call.message.answer(
        f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞—è–≤–∫–∏ {claim_id}:",
        reply_markup=ForceReply(input_field_placeholder="–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    )
    await call.answer()


@router.callback_query(F.data.startswith("ask_screenshot_"))
async def send_screenshot_request(call: CallbackQuery):
    claim_id = call.data.replace("ask_screenshot_", "")

    claim = await Claim.get(claim_id=claim_id)
    if not claim:
        await call.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    message_text = f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –µ—â–µ —Ä–∞–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞."

    await send_message_to_user(claim.user_id, claim_id, message_text)
    await call.message.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    await call.answer()


@router.callback_query(F.data.startswith("ask_payment_"))
async def send_payment_request(call: CallbackQuery):
    claim_id = call.data.replace("ask_payment_", "")

    claim = await Claim.get(claim_id=claim_id)
    if not claim:
        await call.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    message_text = (
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞."
    )

    await send_message_to_user(claim.user_id, claim_id, message_text)
    await call.message.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    await call.answer()


@router.message(F.reply_to_message)
async def handle_force_reply(msg: Message):
    user_id = msg.from_user.id

    if user_id in pending_actions:
        action = pending_actions[user_id]

        if action["type"] == "message":
            # –ê–¥–º–∏–Ω –ø–∏—à–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await process_admin_to_user_message(msg, action)

        elif action["type"] == "user_reply":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∞–¥–º–∏–Ω—É
            await process_user_to_admin_reply(msg, action)

        del pending_actions[user_id]


async def process_admin_to_user_message(msg: Message, action: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    claim_id = action["claim_id"]
    target_user_id = action["user_id"]

    # ‚úÖ –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –§–û–¢–û –ò –¢–ï–ö–°–¢
    if msg.photo:
        # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ
        largest_photo = msg.photo[-1]
        file_id = largest_photo.file_id
        caption = msg.caption or "–§–æ—Ç–æ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        await AdminMessage.create(
            claim_id=claim_id,
            from_admin_id=msg.from_user.id,
            to_user_id=target_user_id,
            message_text=caption,
            is_reply=False
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await bot.send_photo(
                chat_id=target_user_id,
                photo=file_id,
                caption=f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ –∑–∞—è–≤–∫–µ {claim_id}:\n\n{caption}",
                reply_markup=user_reply_ikb(claim_id)
            )
            await msg.answer("‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        except Exception as e:
            await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")

    else:
        # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç
        message_text = msg.text or msg.caption or "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"

        await AdminMessage.create(
            claim_id=claim_id,
            from_admin_id=msg.from_user.id,
            to_user_id=target_user_id,
            message_text=message_text,
            is_reply=False
        )

        try:
            await bot.send_message(
                chat_id=target_user_id,
                text=f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ –∑–∞—è–≤–∫–µ {claim_id}:\n\n{message_text}",
                reply_markup=user_reply_ikb(claim_id)
            )
            await msg.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        except Exception as e:
            await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")


async def process_user_to_admin_reply(msg: Message, action: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω—É"""
    claim_id = action["claim_id"]

    # ‚úÖ –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –§–û–¢–û –ò –¢–ï–ö–°–¢ –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    if msg.photo:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ
        largest_photo = msg.photo[-1]
        file_id = largest_photo.file_id
        caption = msg.caption or "–§–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        await AdminMessage.create(
            claim_id=claim_id,
            from_admin_id=msg.from_user.id,
            to_user_id=msg.from_user.id,
            message_text=caption,
            is_reply=True
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        for admin_id in bot_config.ADMINS:
            try:
                await bot.send_photo(
                    chat_id=admin_id,
                    photo=file_id,
                    caption=f"üí¨ –§–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∑–∞—è–≤–∫–µ {claim_id}:\n\n{caption}",
                    reply_markup=admin_reply_ikb(claim_id)
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

        await msg.answer("‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")

    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç
        message_text = msg.text or msg.caption or "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"

        await AdminMessage.create(
            claim_id=claim_id,
            from_admin_id=msg.from_user.id,
            to_user_id=msg.from_user.id,
            message_text=message_text,
            is_reply=True
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        for admin_id in bot_config.ADMINS:
            try:
                await bot.send_message(
                    chat_id=admin_id,
                    text=f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∑–∞—è–≤–∫–µ {claim_id}:\n\n{message_text}",
                    reply_markup=admin_reply_ikb(claim_id)
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")

        await msg.answer("‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")