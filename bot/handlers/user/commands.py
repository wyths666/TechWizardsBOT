from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
import re
from bot.templates.user import reg as treg
from bot.templates.user import menu as tmenu  # ‚Üê –¥–æ–±–∞–≤–ª–µ–Ω–æ
from bot.filters.user import NewUser
from core.bot import bot
from utils.check_subscribe import check_user_subscription

router = Router()




# –ó–∞–≥–ª—É—à–∫–∞: –≤–∞–ª–∏–¥–Ω—ã–µ –∫–æ–¥—ã (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ ‚Äî –∏–∑ –ë–î)
VALID_CODES = {"ABC123", "XYZ789"}

# @router.message(Command("start"))
# async def menu(msg: types.Message, state: FSMContext):
#     """ /start –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é (–¥–ª—è —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö) """
#     await msg.answer(text=tmenu.menu_text, reply_markup=tmenu.menu_ikb())
#     await msg.delete()


@router.message(Command("start"), NewUser())
async def start_new_user(msg: Message, state: FSMContext):
    await msg.answer(text=treg.start_text)
    await state.set_state(treg.RegState.waiting_for_code)
    await msg.delete()


@router.message(StateFilter(treg.RegState.waiting_for_code))
async def process_code(msg: Message, state: FSMContext):
    code = msg.text.strip().upper()

    if code not in VALID_CODES:
        await msg.answer(text=treg.code_not_found_text, reply_markup=tmenu.support_ikb())
        return

    # VALID_CODES.remove(code)

    # === –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–∏–≥—Ä—ã—à–µ ===
    await msg.answer(text=treg.code_found_text)
    await state.update_data(entered_code=code)

    # === –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É ===
    CHANNEL_USERNAME = "@tech_repost"
    is_subscribed = await check_user_subscription(bot, msg.from_user.id, CHANNEL_USERNAME)

    if not is_subscribed:
        await msg.answer(
            text=treg.not_subscribed_text,
            reply_markup=tmenu.check_subscription_ikb()
        )
        return

    # === –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî –ø—Ä–æ—Å–∏–º –æ—Ç–∑—ã–≤ ===
    await msg.answer(text=treg.review_request_text, reply_markup=tmenu.send_screenshot_ikb())
    await state.set_state(treg.RegState.waiting_for_screenshot)


@router.callback_query(treg.RegCallback.filter(F.step == "check_sub"))
async def check_subscription_callback(call: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    code = data.get("entered_code")

    if not code:
        await call.answer("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å–Ω–æ–≤–∞.", show_alert=True)
        await call.message.delete()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    CHANNEL_USERNAME = "@tech_repost"
    is_subscribed = await check_user_subscription(bot, call.from_user.id, CHANNEL_USERNAME)

    if not is_subscribed:
        await call.answer("–í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        return

    # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∏ –∏–¥—ë–º –¥–∞–ª—å—à–µ
    await call.message.delete()

    await call.message.answer(
        text=treg.review_request_text,
        reply_markup=tmenu.send_screenshot_ikb()
    )
    await state.set_state(treg.RegState.waiting_for_screenshot)
    await call.answer()


@router.callback_query(treg.RegCallback.filter())
async def handle_reg_callback(call: CallbackQuery, callback_data: treg.RegCallback, state: FSMContext):
    step = callback_data.step

    if step == "send_screenshot":
        await call.message.edit_text(text=treg.screenshot_request_text)
        await state.set_state(treg.RegState.waiting_for_screenshot)
    elif step == "phone":
        await call.message.edit_text(text=treg.phone_format_text)
        await state.set_state(treg.RegState.waiting_for_phone_number)
    elif step == "card":
        await call.message.edit_text(text=treg.card_format_text)
        await state.set_state(treg.RegState.waiting_for_card_number)

    await call.answer()


from asyncio import Lock

# –°–æ–∑–¥–∞–µ–º –ª–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_locks = {}

from asyncio import Lock

# –°–æ–∑–¥–∞–µ–º –ª–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_locks = {}


@router.message(StateFilter(treg.RegState.waiting_for_screenshot))
async def process_screenshot(msg: Message, state: FSMContext):
    if not msg.photo:
        await msg.answer(text=treg.screenshot_error_text, reply_markup=tmenu.support_ikb())
        return

    user_id = msg.from_user.id
    if user_id not in user_locks:
        user_locks[user_id] = Lock()

    async with user_locks[user_id]:
        data = await state.get_data()
        largest_photo = msg.photo[-1]
        file_id = largest_photo.file_id

        current_photos = data.get("photo_file_ids", [])
        current_photos.append(file_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await state.update_data(
            photo_file_ids=current_photos,
            review_text=data.get("review_text", "") or msg.caption or "",
            screenshot_received=True
        )

        # === –†–ï–î–ê–ö–¢–ò–†–£–ï–ú —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ ===
        existing_msg_id = data.get("phone_card_message_id")

        new_text = f"üì∏ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: {len(current_photos)}\n\n{treg.phone_or_card_text}"

        if existing_msg_id:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await bot.edit_message_text(
                    chat_id=msg.chat.id,
                    message_id=existing_msg_id,
                    text=new_text,
                    reply_markup=tmenu.phone_or_card_ikb()
                )
            except Exception as e:
                if "message is not modified" not in str(e):
                    print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        else:
            # –ü–µ—Ä–≤—ã–π —Ä–∞–∑ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            sent_msg = await msg.answer(
                text=new_text,
                reply_markup=tmenu.phone_or_card_ikb()
            )
            await state.update_data(phone_card_message_id=sent_msg.message_id)

        await state.set_state(treg.RegState.waiting_for_phone_or_card)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã)
        # try:
        #     await msg.delete()
        # except:
        #     pass

@router.message(StateFilter(treg.RegState.waiting_for_phone_number))
async def process_phone(msg: Message, state: FSMContext):
    phone = msg.text.strip()
    if not re.match(r'^(?:\+7|8)\d{10}$', phone):
        await msg.answer("–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7**********")
        return

    await state.update_data(phone=phone)
    await msg.answer(text=treg.bank_request_text)
    await state.set_state(treg.RegState.waiting_for_bank)


@router.message(StateFilter(treg.RegState.waiting_for_card_number))
async def process_card(msg: Message, state: FSMContext):
    card = msg.text.replace(" ", "").strip()
    if not card.isdigit() or len(card) != 16:
        await msg.answer("–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ 2222 2222 2222 2222")
        return

    await state.update_data(card=card)
    await msg.answer(text=treg.bank_request_text)
    await state.set_state(treg.RegState.waiting_for_bank)


@router.message(StateFilter(treg.RegState.waiting_for_bank))
async def process_bank(msg: Message, state: FSMContext):
    bank = msg.text.strip()
    await state.update_data(bank=bank)

    data = await state.get_data()
    code = data.get("entered_code")

    if code in VALID_CODES:
        VALID_CODES.remove(code)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
    claim_text = (
        f"üìå –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–∏–≥—Ä—ã—à!\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: t.me/user/{msg.from_user.id}\n"
        f"üìù –û—Ç–∑—ã–≤: {data.get('review_text', '‚Äî')}\n"
        f"üè¶ –ë–∞–Ω–∫: {bank}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '‚Äî')}\n"
        f"üí≥ –ö–∞—Ä—Ç–∞: {data.get('card', '‚Äî')}"
    )

    MANAGER_GROUP_ID = 808947863
    await bot.send_message(MANAGER_GROUP_ID, claim_text)

    photo_ids = data.get("photo_file_ids", [])
    photos_sent = data.get("photos_sent_to_manager", False)

    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ
    if photo_ids and not photos_sent:
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ
        if len(photo_ids) == 1:
            await bot.send_photo(
                chat_id=MANAGER_GROUP_ID,
                photo=photo_ids[0],
                caption="üñºÔ∏è –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–∑—ã–≤–∞"
            )
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
        else:
            media_group = []
            for i, file_id in enumerate(photo_ids):
                # –¢–æ–ª—å–∫–æ —É –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç caption
                if i == 0:
                    media_group.append(
                        types.InputMediaPhoto(
                            media=file_id,
                            caption="üñºÔ∏è –°–∫—Ä–∏–Ω—à–æ—Ç—ã –æ—Ç–∑—ã–≤–∞"
                        )
                    )
                else:
                    media_group.append(
                        types.InputMediaPhoto(media=file_id)
                    )

            try:
                await bot.send_media_group(
                    chat_id=MANAGER_GROUP_ID,
                    media=media_group
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")
                # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É
                for file_id in photo_ids:
                    await bot.send_photo(
                        chat_id=MANAGER_GROUP_ID,
                        photo=file_id
                    )

        # ‚úÖ –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
        await state.update_data(photos_sent_to_manager=True)

    await msg.answer(text=treg.success_text)
    await state.clear()


