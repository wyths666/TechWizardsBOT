import re
from asyncio import Lock
from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ForceReply, InlineKeyboardMarkup, InlineKeyboardButton
from utils.pending_storage import pending_actions
from bot.templates.admin import menu as tadmin
from bot.templates.user import reg as treg
from bot.templates.user import menu as tmenu
from core.bot import bot, bot_config
from db.beanie.models import User, Claim, AdminMessage
from db.mysql.crud import get_and_delete_code
from utils.check_subscribe import check_user_subscription
from config import cnf
from aiogram.types import FSInputFile

router = Router()
user_locks = {}


@router.message(Command("start"))
async def start_new_user(msg: Message, state: FSMContext):
    await state.clear()

    user_id = msg.from_user.id
    username = msg.from_user.username

    # === –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
    user = await User.get(tg_id=user_id)
    if not user:
        # === –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
        role = "admin" if user_id in bot_config.ADMINS else "user"
        user = await User.create(
            tg_id=user_id,
            username=username,
            role=role
        )

    welcome_photo = FSInputFile("utils/IMG_1262.png")
    welcome_text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Pure. –í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥, —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–∞ –≥–æ–ª–æ–≥—Ä–∞–º–º–µ."

    await msg.answer_photo(
        photo=welcome_photo,
        caption=welcome_text
    )
    await state.set_state(treg.RegState.waiting_for_code)
    await msg.delete()


@router.message(Command("help"))
async def help_preserve_state(msg: Message, state: FSMContext):
    """/help –±–µ–∑ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()
    current_data = await state.get_data() if current_state else {}

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–º–æ—â—å
    support_url = cnf.bot.SUPPORT
    if support_url.startswith("https://t.me/"):
        username = support_url.replace("https://t.me/", "")
        support_url = f"tg://resolve?domain={username}"

    await msg.answer(
        text="üí¨ <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
             "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n"
             "‚ö†Ô∏è <i>–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞—â–µ–Ω–∏—è.</i>",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url=support_url)
            ]]
        )
    )

    # –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
    if current_state:
        await state.set_state(current_state)
        await state.set_data(current_data)

@router.message(StateFilter(treg.RegState.waiting_for_code))
async def process_code(msg: Message, state: FSMContext):
    if not msg.text:
        await msg.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥."
        )
        return
    code = msg.text.strip()

    code_valid = await get_and_delete_code(code)
    if not code_valid:
        await msg.answer(text=treg.code_not_found_text, reply_markup=tmenu.support_ikb())
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–∏–≥—Ä—ã—à–µ
    await msg.answer(text=treg.code_found_text)

    CHANNEL_USERNAME = cnf.bot.CHANNEL_USERNAME
    is_subscribed = await check_user_subscription(bot, msg.from_user.id, CHANNEL_USERNAME)

    if not is_subscribed:
        await msg.answer(
            text=treg.not_subscribed_text,
            reply_markup=tmenu.check_subscription_ikb()
        )
        await state.update_data(entered_code=code)
        return

    # –£—Å–ø–µ—à–Ω–æ ‚Äî –∏–¥—ë–º –∫ –æ—Ç–∑—ã–≤—É
    await proceed_to_review(user_tg_id=msg.from_user.id, state=state, code=code)


@router.callback_query(treg.RegCallback.filter(F.step == "check_sub"))
async def check_subscription_callback(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    code = data.get("entered_code")

    if not code:
        await call.answer("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å–Ω–æ–≤–∞.", show_alert=True)
        await call.message.delete()
        return

    CHANNEL_USERNAME = cnf.bot.CHANNEL_USERNAME
    is_subscribed = await check_user_subscription(bot, call.from_user.id, CHANNEL_USERNAME)

    if not is_subscribed:
        await call.answer("–í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        return

    await call.message.delete()
    await proceed_to_review(user_tg_id=call.from_user.id, state=state, code=code)
    await call.answer()


async def proceed_to_review(user_tg_id: int, state: FSMContext, code: str):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Ç–∑—ã–≤—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    claim_id = await Claim.generate_next_claim_id()

    # –°–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É —Å user_tg_id (–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID)
    await Claim.create(
        claim_id=claim_id,
        user_id=user_tg_id,
        code=code,
        code_status="valid",
        process_status="process",
        claim_status="pending",
        payment_method="unknown",
        review_text="",
        photo_file_ids=[]
    )

    await state.update_data(claim_id=claim_id, entered_code=code)
    # –ü–æ–ª—É—á–∞–µ–º chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤ –ª–∏—á–∫–µ = user_tg_id)
    await bot.send_message(
        chat_id=user_tg_id,
        text=treg.review_request_text,
        reply_markup=tmenu.send_screenshot_ikb()
    )
    await state.set_state(treg.RegState.waiting_for_screenshot)



@router.callback_query(treg.RegCallback.filter())
async def handle_reg_callback(call: CallbackQuery, callback_data: treg.RegCallback, state: FSMContext):
    step = callback_data.step

    if step == "send_screenshot":
        await call.message.edit_text(text=treg.screenshot_request_text)
        await state.set_state(treg.RegState.waiting_for_screenshot)

    elif step == "phone":
        await call.message.edit_text(text=treg.phone_format_text)
        await state.set_state(treg.RegState.waiting_for_phone_number)

    elif step == "card":
        await call.message.edit_text(text=treg.card_format_text)
        await state.set_state(treg.RegState.waiting_for_card_number)

    await call.answer()


@router.message(StateFilter(treg.RegState.waiting_for_screenshot))
async def process_screenshot(msg: Message, state: FSMContext):
    if not msg.photo:
        await msg.answer(text=treg.screenshot_error_text, reply_markup=tmenu.support_ikb())
        return

    user_id = msg.from_user.id
    if user_id not in user_locks:
        user_locks[user_id] = Lock()

    async with user_locks[user_id]:
        data = await state.get_data()
        largest_photo = msg.photo[-1]
        file_id = largest_photo.file_id

        current_photos = data.get("photo_file_ids", [])
        current_photos.append(file_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await state.update_data(
            photo_file_ids=current_photos,
            review_text=data.get("review_text", "") or msg.caption or "",
            screenshot_received=True
        )

        existing_msg_id = data.get("phone_card_message_id")

        new_text = f"{treg.phone_or_card_text}"

        if existing_msg_id:
            try:
                await bot.edit_message_text(
                    chat_id=msg.chat.id,
                    message_id=existing_msg_id,
                    text=new_text,
                    reply_markup=tmenu.phone_or_card_ikb()
                )
            except Exception as e:
                if "message is not modified" not in str(e):
                    print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        else:
            sent_msg = await msg.answer(
                text=new_text,
                reply_markup=tmenu.phone_or_card_ikb()
            )
            await state.update_data(phone_card_message_id=sent_msg.message_id)

        await state.set_state(treg.RegState.waiting_for_phone_or_card)


@router.message(StateFilter(treg.RegState.waiting_for_phone_number))
async def process_phone(msg: Message, state: FSMContext):
    # –ü–†–û–í–ï–†–Ø–ï–ú, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
    if not msg.text:
        await msg.answer("–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7**********")
        return

    phone = msg.text.strip()

    # –ü–†–û–í–ï–†–Ø–ï–ú —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not re.match(r'^(?:\+7|8)\d{10}$', phone):
        await msg.answer(
            "–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7**********")
        return

    await state.update_data(phone=phone)
    await msg.answer(text=treg.bank_request_text)
    await state.set_state(treg.RegState.waiting_for_bank)


@router.message(StateFilter(treg.RegState.waiting_for_card_number))
async def process_card(msg: Message, state: FSMContext):
    # –ü–†–û–í–ï–†–Ø–ï–ú, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
    if not msg.text:
        await msg.answer("–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ 2222 2222 2222 2222")
        return

    card = msg.text.replace(" ", "").strip()

    # –ü–†–û–í–ï–†–Ø–ï–ú —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
    if not card.isdigit() or len(card) != 16:
        await msg.answer(
            "–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ 2222 2222 2222 2222")
        return

    await state.update_data(card=card)
    await finalize_claim(user_tg_id=msg.from_user.id, state=state)


@router.message(StateFilter(treg.RegState.waiting_for_bank))
async def process_bank(msg: Message, state: FSMContext):
    # –ü–†–û–í–ï–†–Ø–ï–ú, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
    if not msg.text:
        await msg.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ —Ç–µ–∫—Å—Ç–æ–º.")
        return

    bank = msg.text.strip()
    await state.update_data(bank=bank)
    await finalize_claim(user_tg_id=msg.from_user.id, state=state)


async def finalize_claim(user_tg_id: int, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞—è–≤–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ—ë –≤ –≥—Ä—É–ø–ø—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
    data = await state.get_data()
    claim_id = data.get("claim_id")

    if not claim_id:
        await bot.send_message(chat_id=user_tg_id, text="–û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    claim = await Claim.get(claim_id=claim_id)
    if not claim:
        await bot.send_message(chat_id=user_tg_id, text="–û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ.")
        return

    phone = data.get('phone')
    card = data.get('card')
    bank = data.get('bank', '')
    review_text = data.get('review_text', '‚Äî')
    photo_ids = data.get("photo_file_ids", [])

    # === –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ ===
    if phone:
        payment_info = f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}"
        bank_info = f"–ë–∞–Ω–∫: {bank}\n" if bank else ""
        payment_method_label = "phone"
    else:
        payment_info = f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {card}"
        bank_info = ""
        payment_method_label = "card"

    claim_text = (
        f"–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {claim_id}\n"
        f"–¢–µ–∫—Å—Ç: {review_text}\n"
        f"{bank_info}"
        f"{payment_info}"
    )

    # === –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É ===
    MANAGER_GROUP_ID = cnf.bot.GROUP_ID

    # === –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ===
    if phone:  # –ï—Å–ª–∏ –°–ë–ü - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞ ID –±–∞–Ω–∫–∞
        keyboard = tadmin.claim_action_ikb_with_bank_button(claim_id)
    else:  # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ - –æ–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        keyboard = tadmin.claim_action_ikb(claim_id)

    # === –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–∞ ===
    if photo_ids:
        if len(photo_ids) == 1:
            # –û–î–ù–û –§–û–¢–û: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–Ω–æ–ø–∫–∞–º–∏
            await bot.send_photo(
                chat_id=MANAGER_GROUP_ID,
                photo=photo_ids[0],
                caption=f"{claim_text}\n\nüì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –∫ –∑–∞—è–≤–∫–µ ‚Ññ{claim_id}",
                reply_markup=keyboard  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
        else:
            # –ù–ï–°–ö–û–õ–¨–ö–û –§–û–¢–û: —Å–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
            media_group = []
            for i, fid in enumerate(photo_ids):
                if i == 0:  # –¢–æ–ª—å–∫–æ —É –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥–ø–∏—Å—å
                    media_group.append(types.InputMediaPhoto(
                        media=fid,
                        caption=f"{claim_text}\n\nüì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã –ø–æ –∑–∞—è–≤–∫–µ ‚Ññ{claim_id} ({len(photo_ids)} —Ñ–æ—Ç–æ)"
                    ))
                else:
                    media_group.append(types.InputMediaPhoto(media=fid))

            try:
                await bot.send_media_group(chat_id=MANAGER_GROUP_ID, media=media_group)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
                await bot.send_message(
                    chat_id=MANAGER_GROUP_ID,
                    text=f"–î–µ–π—Å—Ç–≤–∏—è –ø–æ –∑–∞—è–≤–∫–µ ‚Ññ{claim_id}:",
                    reply_markup=keyboard  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")
                # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É
                for i, fid in enumerate(photo_ids):
                    caption = f"{claim_text}\n\nüì∏ –°–∫—Ä–∏–Ω—à–æ—Ç {i + 1}/{len(photo_ids)}" if i == 0 else None
                    await bot.send_photo(
                        chat_id=MANAGER_GROUP_ID,
                        photo=fid,
                        caption=caption
                    )
                await bot.send_message(
                    chat_id=MANAGER_GROUP_ID,
                    text=f"–î–µ–π—Å—Ç–≤–∏—è –ø–æ –∑–∞—è–≤–∫–µ ‚Ññ{claim_id}:",
                    reply_markup=keyboard  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                )
    else:
        await bot.send_message(
            chat_id=MANAGER_GROUP_ID,
            text=claim_text,
            reply_markup=keyboard  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )

    # === –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ===
    update_data = {
        "process_status": "complete",
        "claim_status": "process",
        "payment_method": payment_method_label,
        "review_text": review_text,
        "photo_file_ids": photo_ids
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    if phone:  # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ç–µ–ª–µ—Ñ–æ–Ω
        update_data["phone"] = phone
        update_data["card"] = None
    elif card:  # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ä—Ç–∞
        update_data["card"] = card
        update_data["phone"] = None

    # === –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É ===
    await claim.update(**update_data)

    # === –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ ===
    await bot.send_message(chat_id=user_tg_id, text=treg.success_text)
    await state.clear()


@router.callback_query(F.data.startswith("reply_"))
async def reply_to_admin(call: CallbackQuery):
    claim_id = call.data.replace("reply_", "")
    claim = await Claim.get(claim_id=claim_id)
    if not claim:
        await call.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –û–ë–©–ò–ô —Å–ª–æ–≤–∞—Ä—å
    pending_actions[call.from_user.id] = {
        "type": "user_reply",
        "claim_id": claim_id
    }



    await call.message.answer(
        "üí¨ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:",
        reply_markup=ForceReply(input_field_placeholder="–í–∞—à –æ—Ç–≤–µ—Ç...")
    )
    await call.answer()
